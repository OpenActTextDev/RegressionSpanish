#  FILENAME IS Chap4RCode.txt ;
#  THIS CODE USES THE DATASET TermLife.csv
#  THIS CODE USES THE DATASET Auto Insurance Claims.csv
#  THIS CODE USES THE DATASET WiscHospCosts.csv

Term = read.csv(choose.files(), header=TRUE)

#  PICK THE SUBSET OF THE DATA CORRESPONDING TO TERM PURCHASE
Term2 = subset(Term, FACE > 0)
names(Term2)
attach(Term2)
LNFACE = log(FACE)
LNINCOME = log(INCOME)

boxplot(LNFACE ~ MARSTAT, data=Term2,xlab="Marital Status")
dev.off()

table(MARSTAT)

#  SUMMARY BY LEVEL OF MARSTAT
#  INSTALL THIS PACKAGE ONCE
#install.packages("Hmisc")
help(package=Hmisc)
library(Hmisc)
summarize(LNFACE, MARSTAT, length) 
summarize(LNFACE, MARSTAT, mean) 
summarize(LNFACE, MARSTAT, sd) 

mean(LNFACE);sd(LNFACE)
t1 = summarize(LNFACE, MARSTAT, length) 
t2 = summarize(LNFACE, MARSTAT, mean) 
t3 = summarize(LNFACE, MARSTAT, sd) 
round(cbind(t1,t2,t3),digits=3)

#  MAKE BINARY VARIABLES
MAR0 = 1*(MARSTAT == 0)
MAR1 = 1*(MARSTAT == 1)
MAR2 = 1*(MARSTAT == 2)

Check1 = data.frame(MARSTAT, MAR0, MAR1, MAR2)
fix(Check1)

#  CHECK THE DEPENDENCIES AMONG MARO, MAR1, MAR2
cor(cbind(MAR0, MAR1, MAR2))

#  SECTION 4.1 OUTPUT
model5 = lm(LNFACE ~ LNINCOME+EDUCATION+NUMHH +MAR0+MAR1, data=Term2)
summary(model5)
anova(model5)
aov(model5)

summary(lm(LNFACE ~ LNINCOME+EDUCATION+NUMHH +MAR0+MAR2, data=Term2))
summary(lm(LNFACE ~ LNINCOME+EDUCATION+NUMHH +MAR1+MAR2, data=Term2))


#  TESTING MODEL SUBSETS
model4 = lm(LNFACE ~ LNINCOME+EDUCATION+NUMHH, data=Term2)
anova(model4,model5)

#  COMPARE MODEL WITHOUT FACTOR TO THE ONE WITH
#  THE F-RATIO TURNS OUT TO BE 3.236
qf(0.95, 2, 269)      # GET THE F-VALUE AT 5%
1- pf(3.236, 2, 269)  #  GET THE p-VALUE

#  SECTION 4.2.2 GENERAL LINEAR HYPOTHESIS TEST
library(car)
C = matrix( c(0,0,0,0,0,
             0,0,0,1,0,0,1), nrow=2,ncol=6)
d= matrix(rep(0,2), nrow=2, ncol=1)
linear.hypothesis(model5, C,d)

#  VARIANCE-COVARIANCE MATRIX FOR REGRESSION PARAMETERS 
vcov(model5) 
#  X PRIME X INVERSE MATRIX
summary(model5)$cov.unscaled
#  CHECK
(summary(model5)$cov.unscaled)*((summary(model5)$sigma)^2)
#  CONFIDENCE INTERVALS FOR REGRESSION PARAMETERS  
confint(model5, level=0.95) 

#  CONFIDENCE AND PREDICTION INTERVALS FOR NEW DATA
model4 = lm(LNFACE ~ LNINCOME+EDUCATION+NUMHH, data=Term2)
newdata = data.frame(LNINCOME=11,EDUCATION=12,NUMHH=3)
predict(model4, newdata, interval="confidence")
predict(model4, newdata, interval="prediction")
predict(model4, newdata, interval="prediction", level=.90)

#  CONFIDENCE INTERVALS FOR LINEAR COMBINATIONS OF REGRESSION COEFFICIENTS
library(gmodels)
model4 = lm(LNFACE ~ LNINCOME+EDUCATION+NUMHH, data=Term2)
estimable(model4, c( 0, 0, 0, 1) ) 
estimable(model4, c( 0, 0, 1, 1) ) 

#  CREATE THE CATEGORICAL VARIABLE - A "FACTOR"
MSFactor = factor(Term2$MARSTAT)
str(MSFactor)
model8=lm(LNFACE ~ LNINCOME+EDUCATION+NUMHH+MSFactor,data=Term2)
summary(model8)
anova(model8)

#  AUTO CLAIMS
detach(Term2)
AutoC = read.csv(choose.files(), header=TRUE)
names(AutoC)
fix(AutoC)
attach(AutoC)
str(AutoC)

hist(PAID)
LNPAID = log(PAID)
hist(LNPAID)
boxplot(LNPAID ~ CLASS)
dev.off()

#  CREATE A TABLE OF MEANS AND STANDARD DEVIATIONS
library(Hmisc)
t1 = summarize(LNPAID, CLASS, length) 
t2 = summarize(PAID, CLASS, median) 
t3 = summarize(LNPAID, CLASS, median) 
t4 = summarize(LNPAID, CLASS, mean) 
t5 = summarize(LNPAID, CLASS, sd) 
tableout = cbind(t1,t2[2],t3[2],t4[2],t5[2]);tableout
setwd("c://")
write.csv(t(tableout), file = "AutoClaimsClassC.csv")

model1=lm(LNPAID ~ CLASS, data=AutoC)
summary(model1)
anova(model1)

boxplot(LNPAID ~ STATE)
  
model2=lm(LNPAID~ STATE, data=AutoC)
summary(model2)
anova(model2)

model3=lm(LNPAID ~ CLASS+STATE+AGE+GENDER, data=AutoC)
summary(model3)
  
anova(model3)

detach(AutoC)

# WISCONSIN HOSPITAL COSTS DATA
HospitalCosts = read.csv(choose.files(), header=TRUE)
attach(HospitalCosts)

LNCHGNUM = log(CHG_NUM)

##  LETTER PLOT FIGURES
plot(LNCHGNUM~log(NO_DSCHG),data=HospitalCosts,
     subset=DRG==209|DRG==391|DRG==430,type="p",pch=1,cex=0.6, 
     xlim=c(2,9.2),xaxp=c(1.5,9,5),xlab="Number of Discharges",
     ylim=c(5.9,9.8),yaxp=c(6.0,9.6,3),las=1)
dev.off()

DRGabc = character(length=length(DRG))
# or use DRGabc=NULL 
for (i in 1:length(DRG))
{DRGabc[i]=if (DRG[i]==209) "A" else if (DRG[i]==391) 
    "B" else if (DRG[i]==430) "C" else "D"}

plot(LNCHGNUM~log(NO_DSCHG),data=HospitalCosts,
    subset=DRG==209|DRG==391|DRG==430,type="p",
    pch=as.character(DRGabc),cex=0.8, xlim=c(2,9.2),
    xaxp=c(1.5,9,5),xlab="Number of Discharges",ylim=c(5.9,9.8),
    yaxp=c(6.0,9.6,3),las=1)
dev.off()

